{
	"info": {
		"_postman_id": "751731fe-04f1-4466-b58f-f1651b96055b",
		"name": "Class 3 - Trello API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Memberships of a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/members/me/boards?fields=name,url&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"members",
						"me",
						"boards"
					],
					"query": [
						{
							"key": "fields",
							"value": "name,url"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Board is created and open\", function () {\r",
							"    pm.expect(response.name).to.eql(pm.collectionVariables.get('boardName'));\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.test(\"Board should be private\", function () {\r",
							"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\r",
							"});\r",
							";\r",
							"pm.collectionVariables.set(\"boardId\", response.id);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"boardName\", getRandomBoardName());\r",
							"\r",
							"function getRandomBoardName() {\r",
							"    return pm.variables.replaceIn('{{$randomFirstName}} {{$randomLastName}} board');\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}&defaultLists=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}",
							"description": "Board to get"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}",
							"description": "This is the Postman client api-key"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}",
							"description": "This is the user token"
						},
						{
							"key": "defaultLists",
							"value": "false",
							"description": "Define if the defaults list will be created"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get board by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/boards/:boardId?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"boards",
						":boardId"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "boardId",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Name should be 'TODO' and list should be open\", function () {;\r",
							"    pm.expect(response.name).to.eql(\"TODO\");\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"todoListId\", response.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/lists?name=TODO&idBoard={{boardId}}&pos=top&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "TODO",
							"description": "This is the list name"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}",
							"description": "This is the board where the list will be created"
						},
						{
							"key": "pos",
							"value": "top",
							"description": "This is the list position"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}",
							"description": "This is the postman api key"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}",
							"description": "This is the user token"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Name should be 'DONE' and list should be open\", function () {\r",
							"    pm.expect(response.name).to.eql(\"DONE\");\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"doneListId\", response.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/lists?name=DONE&idBoard={{boardId}}&pos=bottom&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "DONE",
							"description": "This is the list name"
						},
						{
							"key": "idBoard",
							"value": "{{boardId}}",
							"description": "This is the board where the list will be created"
						},
						{
							"key": "pos",
							"value": "bottom",
							"description": "This is the list position"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}",
							"description": "This is the postman api key"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}",
							"description": "This is the user token"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify card creation response properties\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Learn Postman\");\r",
							"    pm.expect(response.closed).to.eql(false);\r",
							"    pm.expect(response.idList).to.eql(pm.collectionVariables.get('todoListId'));\r",
							"    pm.expect(response.idBoard).to.eql(pm.collectionVariables.get('boardId'));\r",
							"    pm.expect(response.badges.votes).to.eql(0);\r",
							"    pm.expect(response.badges.attachments).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"cardId\", response.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/cards?name=Learn Postman&idList={{todoListId}}&pos=top&key={{trelloKey}}&token={{trelloToken}}&desc=Complete the Postman course!",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"cards"
					],
					"query": [
						{
							"key": "name",
							"value": "Learn Postman",
							"description": "This is the card name"
						},
						{
							"key": "idList",
							"value": "{{todoListId}}",
							"description": "This is the board where the list will be created"
						},
						{
							"key": "pos",
							"value": "top",
							"description": "This is the list position"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}",
							"description": "This is the postman api key"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}",
							"description": "This is the user token"
						},
						{
							"key": "desc",
							"value": "Complete the Postman course!",
							"description": "This is the card description"
						},
						{
							"key": "pos",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify that the name is still 'Learn Postman'\", function () {\r",
							"    pm.expect(response.name).to.eql(\"Learn Postman\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify that the card was moved to the 'DONE' list'\", function () {\r",
							"    pm.expect(response.idList).to.eql(pm.collectionVariables.get('doneListId'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/cards/:cardId?idList={{doneListId}}&pos=top&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"cards",
						":cardId"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{doneListId}}"
						},
						{
							"key": "pos",
							"value": "top"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "cardId",
							"value": "{{cardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/boards/:boardId?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"boards",
						":boardId"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "boardId",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve deleted board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.clear();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{apiVersion}}/boards/:boardId?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"boards",
						":boardId"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "boardId",
							"value": "{{boardId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "boardName",
			"value": ""
		},
		{
			"key": "boardId",
			"value": ""
		}
	]
}